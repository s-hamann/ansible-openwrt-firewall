---
# fw4 only supports single zones as source or destination for firewall rules.
# The following task enables lists and zone complements by expanding these
# specifications into multiple rules.
- name: 'Expand firewall rules'
  ansible.builtin.set_fact:
    openwrt_firewall_rules: "{% set _expanded_rules = [] -%}
      {% for rule in openwrt_firewall_rules -%}
        {% if key not in rule.keys() -%}
          {# The rule being expanded does not contain the key being expanded. Keep it as is. -#}
          {% set _ = _expanded_rules.append(rule) -%}
        {% else -%}
          {% if rule[key] is not string and rule is sequence -%}
            {# The rule's key is a list. Add a copy of the rule for each list element. -#}
            {% for zone in rule[key] -%}
              {% set _ = _expanded_rules.append(rule | ansible.builtin.combine({key: zone, 'name': rule['name'] | replace('$' ~ key, zone)})) -%}
            {% endfor -%}
          {% else -%}
            {# The rule's key is not a list. -#}
            {% if rule[key].startswith('!') -%}
              {# The rule's key is a complement. Add a copy of the rule for
              each configured zone except the ones referenced in the rule. -#}
              {% for zone in openwrt_firewall_zones | map(attribute='name') if zone not in rule[key][1:] | ansible.builtin.split(',') -%}
                {% set _ = _expanded_rules.append(rule | ansible.builtin.combine({key: zone, 'name': rule['name'] | replace('$' ~ key, zone)})) -%}
              {% endfor -%}
            {% else -%}
              {# The rule's key simply references a zone. Keep it as is. -#}
              {% set _ = _expanded_rules.append(rule) -%}
            {% endif -%}
          {% endif -%}
        {% endif -%}
      {% endfor -%}
      {{ _expanded_rules }}"
  loop:
    - src
    - dest
  loop_control:
    loop_var: key

- name: 'Set up drop-in firewall includes'
  ansible.builtin.copy:
    dest: "/etc/nftables.d/{{ include['name'] }}.nft"
    src: "{{ include['src'] | default(omit) }}"
    content: "{{ include['content'] | default(omit) }}"
    owner: root
    group: root
    mode: '0644'
  loop: "{{ openwrt_firewall_drop_in_includes }}"
  loop_control:
    loop_var: include
    label: "{{ include['name'] }}"

- name: 'Set up firewall includes'
  ansible.builtin.copy:
    dest: "{{ include['path'] }}"
    content: "{{ include['content'] }}"
    owner: root
    group: root
    mode: "{{ include['type'] | default('script') == 'script' | ansible.builtin.ternary('0755', '0644') }}"
  loop: "{{ openwrt_firewall_includes | selectattr('content', 'defined') }}"
  loop_control:
    loop_var: include
    label: "{{ include['path'] }}"
  when: "include['enabled'] | default(true)"
  notify:
    - _openwrt_restart_firewall

- name: 'Configure firewall'
  ansible.builtin.template:
    dest: '/etc/config/firewall'
    src: 'firewall.j2'
    owner: root
    group: root
    mode: '0644'
  notify:
    - _openwrt_restart_firewall

- name: 'Install LuCI-translation for firewall'
  community.general.opkg:
    name: "{{ item }}"
    state: present
  loop: "{{ openwrt_firewall_luci_i18n | map('regex_replace', '(\\S+)', 'luci-i18n-firewall-\\1') }}"
  when: "openwrt_firewall_banip_luci | bool"

- name: 'Set up banIP'
  when: "openwrt_firewall_banip_config.keys() | count > 0"
  block:
    - name: 'Install banIP'
      community.general.opkg:
        name: banip
        state: present

    - name: 'Install LuCI-integration for banIP'
      community.general.opkg:
        name: "{{ item }}"
        state: present
      loop: "{{ ['luci-app-banip'] + [openwrt_firewall_luci_i18n | map('regex_replace', '(\\S+)', 'luci-i18n-banip-\\1')] | ansible.builtin.flatten }}"
      when: "openwrt_firewall_banip_luci | bool"

    - name: 'Configure banIP'
      ansible.builtin.template:
        dest: '/etc/config/banip'
        src: 'banip.j2'
        owner: root
        group: root
        mode: '0600'
      notify:
        - _openwrt_restart_banip

    # Note: The cron module requires python, for lineinfile we can use an
    # implementation that does not.
    - name: 'Schedule regular list updates'
      ansible.builtin.lineinfile:
        path: '/etc/crontabs/root'
        line: "{{ openwrt_firewall_banip_reload_time }} /etc/init.d/banip reload"
        regexp: '^\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+/etc/init.d/banip reload$'
        create: true
        owner: root
        group: root
        mode: 0600
        state: "{{ (openwrt_firewall_banip_reload_time != false) | ternary('present', 'absent') }}"
      when: "openwrt_firewall_banip_config['ban_feed'] | default([]) | count > 0"
      notify: _openwrt_restart_cron

    - name: 'Schedule regular mail reports'
      ansible.builtin.lineinfile:
        path: '/etc/crontabs/root'
        line: "{{ openwrt_firewall_banip_report_time }} /etc/init.d/banip report mail"
        regexp: '^\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+/etc/init.d/banip report mail$'
        create: true
        owner: root
        group: root
        mode: 0600
        state: "{{ (openwrt_firewall_banip_report_time != false) | ternary('present', 'absent') }}"
      when: "openwrt_firewall_banip_config['ban_mailreceiver'] is defined"
      notify: _openwrt_restart_cron
